name: Deploy to Scaleway

on:
  push:
    branches:
      - main  # Runs on push to the main branch

  workflow_dispatch:  # Allows manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Trivy for vulnerability scanning
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin v0.59.1
          trivy --version

      - name: Install Scaleway CLI
        run: |
          curl -s https://raw.githubusercontent.com/scaleway/scaleway-cli/master/scripts/get.sh | sh

      - name: Login to Scaleway
        run: |
          scw init  secret-key=${{ secrets.SCW_SECRET_KEY }} access-key=${{ secrets.SCW_ACCESS_KEY }} organization-id=${{ secrets.SCW_ORGA_ID }} project-id=${{ secrets.SCW_PROJECT_ID }} region=fr-par 

      - name: Login to Scaleway Container Registry
        run: |
          echo ${{ secrets.SCW_SECRET_KEY }} | docker login rg.fr-par.scw.cloud/namespace-boucaud-dorian -u nologin --password-stdin

      # Step 1: Build & Push Backend
      - name: Build & Push Backend to Scaleway Container Registry
        run: |
          docker build -t my-backend ./back
          # Verify image vulnerability
          #trivy image --exit-code 1 --severity HIGH,CRITICAL my-backend
          docker tag my-backend:latest rg.fr-par.scw.cloud/namespace-boucaud-dorian/my-backend:latest
          docker push rg.fr-par.scw.cloud/namespace-boucaud-dorian/my-backend:latest

      # Step 2: Deploy Backend on Scaleway using `scw`
      - name: Deploy Backend to Scaleway 
        run: |
          scw container container create name=backend-container \
            namespace-id=1e3d6ec8-7772-490a-bc87-0b53a16fff9d \
            max-scale=1 \
            cpu-limit=100 \
            memory-limit=128 \
            registry-image=rg.fr-par.scw.cloud/namespace-boucaud-dorian/my-backend:latest \
            port=3000

      - name: Get Backend Container ID and Endpoint
        run: |
          # List all containers and filter by the name "backend-container"
          BACKEND_CONTAINER_ID=$(scw container container list | grep "backend-container" | awk '{print $1}')
          
          # Get the domain name for the container using its ID
          BACKEND_DOMAIN=$(scw container container get $BACKEND_CONTAINER_ID | grep "DomainName" | awk '{print $2}')
          
          # Output the retrieved domain name to verify
          echo "Backend Domain Name: $BACKEND_DOMAIN"
          
          # Set the DomainName as a GitHub Environment variable for use in future steps
          echo "BACKEND_DOMAIN=$BACKEND_DOMAIN" >> $GITHUB_ENV

      # Step 4: Build & Push Frontend
      - name: Build & Push Frontend to Scaleway Container Registry
        run: |
          docker build -t my-frontend ./front
          # Verify image vulnerability
          #trivy image --exit-code 1 --severity HIGH,CRITICAL my-frontend
          docker tag my-frontend:latest rg.fr-par.scw.cloud/namespace-boucaud-dorian/my-frontend:latest
          docker push rg.fr-par.scw.cloud/namespace-boucaud-dorian/my-frontend:latest

      # Step 5: Deploy Frontend on Scaleway using `scw`
      - name: Deploy Backend to Scaleway 
        run: |
          scw container container create name=frontend-container \
            namespace-id=1e3d6ec8-7772-490a-bc87-0b53a16fff9d \
            max-scale=1 \
            cpu-limit=100 \
            memory-limit=128 \
            registry-image=rg.fr-par.scw.cloud/namespace-boucaud-dorian/my-frontend:latest \
            port=80 \
            environment-variables.VITE_API_URL=https://$BACKEND_DOMAIN

      - name: Send Email Notification
        run: |
          echo $job.status
          if [ ${{ job.status }} == "success" ]; then
            SUBJECT="Déploiement réussi"
            BODY="Le déploiement a réussi pour l'application XYZ."
          else
            SUBJECT="Déploiement échoué"
            BODY="Le déploiement a échoué pour l'application XYZ."
          fi

          curl -X POST \
            -H "api-key: ${{ secrets.BREVO_API_KEY }}" \
            -d '{
              "name": "Deployment Notification",
              "subject": "'"$SUBJECT"'",
              "sender": {
                "name": "From Name",
                "email": "myfromemail@mycompany.com"
              },
              "type": "classic",
              "htmlContent": "'"$BODY"'",
              "recipients": {
                "to": [
                  {
                    "email": "boucaud.doriann@gmail.com"
                  }
                ]
              }
            }' \
            'https://api.brevo.com/v3/smtp/email'